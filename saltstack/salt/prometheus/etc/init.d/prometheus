#!/bin/bash
#
# prometheus   Prometheus monitoring server
#
# chkconfig:   345 20 80 Read
# description: The Prometheus monitoring system and time series database. https://prometheus.io/
# processname: prometheus
# config:      /etc/prometheus/prometheus.yml
# pidfile:     /var/run/prometheus.pid

### BEGIN INIT INFO
# Provides:       prometheus
# Required-Start: $local_fs $network consul
# Required-Stop:  $local_fs $network consul
# Should-Start:
# Should-Stop:
# Default-Start: 3 4 5
# Default-Stop:  0 1 2 6
# Short-Description: Prometheus monitoring server
# Description: The Prometheus monitoring system and time series database. https://prometheus.io/
### END INIT INFO

# source function library
. /etc/rc.d/init.d/functions

prog="prometheus"
user="prometheus"
exec="/usr/local/bin/$prog"
pidfile="/var/run/$prog.pid"
lockfile="/var/lock/subsys/$prog"
logfile="/var/log/prometheus/$prog.log"
conffile="/etc/prometheus/prometheus.yml"
datadir="/opt/prometheus/data"

start() {
    [ -x $exec ] || exit 5

    [ -f $conffile ] || exit 6

    umask 077

    touch $logfile $pidfile
    chown $user:$user $logfile $pidfile

    echo -n $"Starting $prog: "

    ## holy shell shenanigans, batman!
    ## daemon can't be backgrounded.  we need the pid of the spawned process,
    ## which is actually done via runuser thanks to --user.  you can't do "cmd
    ## &; action" but you can do "{cmd &}; action".
    daemon \
        --pidfile=$pidfile \
        --user=$user \
        " { $exec -config.file $conffile -storage.local.path $datadir  $1 &>> $logfile & } ; echo \$! >| $pidfile "

    RETVAL=$?
    echo

    [ $RETVAL -eq 0 ] && touch $lockfile

    sleep 2
    return $RETVAL
}

stop() {
    echo -n $"Shutting down $prog: "
    RETVAL=1
    if [ -f $pidfile ]
    then
        # shutdown haven't work, try old way
        killproc -p $pidfile $name
        RETVAL=$?
    else
        success "$name shutdown"
    fi
    echo
    [ $RETVAL -eq 0 ] && rm -f $lockfile
    return $RETVAL
}

restart() {
    stop
    sleep 2
    start
}

reload() {
    echo -n $"Reloading $prog: "
    killproc -p $pidfile $exec -HUP
    echo
}

rh_status() {
    status -p "$pidfile" -l $prog $exec
}

rh_status_q() {
    rh_status >/dev/null 2>&1
}

case "$1" in
    bootstrap)
        rh_status_q && exit 0
        start -bootstrap
        ;;
    start)
        rh_status_q && exit 0
        $1
        ;;
    stop)
        rh_status_q || exit 0
        $1
        ;;
    restart)
        $1
        ;;
    reload)
        rh_status_q || exit 7
        $1
        ;;
    force-reload)
        force_reload
        ;;
    status)
        rh_status
        ;;
    condrestart|try-restart)
        rh_status_q || exit 0
        restart
        ;;
    *)
        echo $"Usage: $0 {bootstrap|start|stop|status|restart|condrestart|try-restart|reload|force-reload}"
        exit 2
esac

exit $?
